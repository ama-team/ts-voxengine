import {EventHandler} from '../../$Implicit/EventHandler';

export = Player;

declare global {
    export interface Player extends VoxEngine.$Implicit.MediaUnit.Source {
        addEventListener(event: PlayerEvents.PlaybackReady, handler: PlayerEvents.PlaybackReady.Handler): void;
        addEventListener(event: PlayerEvents.PlaybackMarkerReached, handler: PlayerEvents.PlaybackMarkerReached.Handler): void;
        addEventListener(event: PlayerEvents.PlaybackFinished, handler: PlayerEvents.PlaybackFinished.Handler): void;
        addEventListener(event: PlayerEvents.Started, handler: PlayerEvents.Started.Handler): void;
        addEventListener(event: PlayerEvents.Stopped, handler: PlayerEvents.Stopped.Handler): void;

        /**
         * Adds handler for specific event generated by Player. Use only
         * functions as handlers; anything except a function leads to
         * the error and scenario termination when a handler will be
         * called.
         *
         * @param event Event class (e.g.,
         * {@link PlayerEvents.PlaybackFinished}).
         * @param handler Handler function. A single parameter is
         * passed - object with event information
         */
        addEventListener<E>(event: any, handler: EventHandler<E>): void;

        /**
         * Add playback marker. The {@link PlayerEvents.PlaybackMarkerReached}
         * event will be triggered when the marker is reached.
         *
         * @param offset Positive/negative offset (ms) from the
         * start/end of media.
         */
        addMarker(offset: number): void;

        /**
         * Pause playback. To continue playback use the
         * {@link Player.resume} method.
         */
        pause(): void;

        removeEventListener(event: PlayerEvents.PlaybackReady, handler?: PlayerEvents.PlaybackReady.Handler): void;
        removeEventListener(event: PlayerEvents.PlaybackMarkerReached, handler?: PlayerEvents.PlaybackMarkerReached.Handler): void;
        removeEventListener(event: PlayerEvents.PlaybackFinished, handler?: PlayerEvents.PlaybackFinished.Handler): void;
        removeEventListener(event: PlayerEvents.Started, handler?: PlayerEvents.Started.Handler): void;
        removeEventListener(event: PlayerEvents.Stopped, handler?: PlayerEvents.Stopped.Handler): void;

        /**
         * Removes handler for specific event generated by {@link Player}.
         *
         * @param event Event class (e.g.,
         * {@link PlayerEvents.PlaybackFinished}).
         * @param handler Handler function. If not specified, all event
         * listeners are removed.
         */
        removeEventListener<E>(event: any, handler?: EventHandler<E>): void;

        /**
         * Resume playback after the {@link Player.pause} method was
         * called.
         */
        resume(): void;

        /**
         * Stops playback. The current player's instance will be
         * destroyed.
         */
        stop(): void;
    }
}
