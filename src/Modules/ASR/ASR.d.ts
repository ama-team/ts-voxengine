export = ASR;

declare global {
    export interface ASR {
        addEventListener(event: ASREvents.Started, handler: ASREvents.Started.Handler): void;

        /**
         * Adds handler for specific event generated by ASR. Use only
         * functions as handlers; anything except a function leads to
         * the error and scenario termination when a handler will be
         * called.
         *
         * @param event Event class (e.g. {@link ASREvents.Stopped}).
         * @param handler Handler function. A single parameter is passed
         * - object with event information.
         */
        addEventListener<E>(event: E, handler: (event: E) => void): void;

        removeEventListener(event: ASREvents.Started, handler?: ASREvents.Started.Handler): void;

        /**
         * Removes handler for specific event generated by ASR.
         *
         * @param event Event class (e.g. {@link ASREvents.Stopped}).
         * @param handler Handler function. If not specified, all event
         * listeners are removed.
         */
        removeEventListener<E>(event: E, handler?: (event: E) => void): void;

        /**
         * Stops recognition. Causes ASREvents.Stopped to be triggered.
         * You must not call any other ASR functions/handlers after the
         * ASR.stop call.
         */
        stop(): void;
    }
}
