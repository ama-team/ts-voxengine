import './ACDEvents'
import {EventHandler} from '../../$Implicit/EventHandler';

export = ACDRequest;

declare global {
    export interface ACDRequest {
        addEventListener(event: ACDEvents.Error, handler: ACDEvents.Error.Handler): void;
        addEventListener(event: ACDEvents.Offline, handler: ACDEvents.Offline.Handler): void;
        addEventListener(event: ACDEvents.OperatorFailed, handler: ACDEvents.OperatorFailed.Event): void;
        addEventListener(event: ACDEvents.OperatorReached, handler: ACDEvents.OperatorReached.Event): void;
        addEventListener(event: ACDEvents.Queued, handler: ACDEvents.Queued.Event): void;
        addEventListener(event: ACDEvents.QueueFull, handler: ACDEvents.QueueFull.Event): void;
        addEventListener(event: ACDEvents.Waiting, handler: ACDEvents.Waiting.Event): void;

        /**
         * Adds handler for specific event generated by ACD request.
         *
         * @param event Event class (i.e., {@link ACDEvents.Offline)}.
         * @param handler Handler function. A single parameter is
         * passed - object with event information.
         */
        addEventListener<E>(event: any, handler: EventHandler<E>): void;

        /**
         * Cancel pending request and remove it from queue.
         */
        cancel(): void;

        /**
         * Request status of the current request. The call of this
         * method will trigger the {@link ACDEvents.Waiting} event; it's
         * possible to retrieve an estimated wait time in minutes via
         * the {@link ACDEvents.Waiting#ewt} property of the event.
         */
        getStatus(): void;

        /**
         * Returns request id. It can be used as the acd_request_id
         * parameter in the GetACDHistory method to search in ACD
         * history.
         */
        id(): string;

        /**
         * Removes handler for specific event generated by ACD request.
         *
         * @param event Event class (i.e., {@link ACDEvents.Offline}).
         * @param handler Handler function. If not specified, all event
         * listeners are removed.
         */
        removeEventListener(event: ACDEvents, handler?: Function);
    }
}
