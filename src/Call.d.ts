import {EventHandler} from './$Implicit/EventHandler';

export = Call;

declare global {
    export interface Call extends VoxEngine.$Implicit.MediaUnit.Source {
        addEventListener(event: CallEvents.AudioStarted, handler: CallEvents.AudioStarted.Handler): void;

        addEventListener(event: CallEvents.Connected, handler: CallEvents.Connected.Handler): void;

        addEventListener(event: CallEvents.Disconnected, handler: CallEvents.Disconnected.Handler): void;

        addEventListener(event: CallEvents.Failed, handler: CallEvents.Failed.Handler): void;

        addEventListener(event: CallEvents.FirstVideoPacket, handler: CallEvents.FirstVideoPacket.Handler): void;

        addEventListener(event: CallEvents.InfoReceived, handler: CallEvents.InfoReceived.Handler): void;

        addEventListener(event: CallEvents.MessageReceived, handler: CallEvents.MessageReceived.Handler): void;

        addEventListener(event: CallEvents.MicStatusChange, handler: CallEvents.MicStatusChange.Handler): void;

        addEventListener(event: CallEvents.OffHold, handler: CallEvents.OffHold.Handler): void;

        addEventListener(event: CallEvents.OnHold, handler: CallEvents.OnHold.Handler): void;

        addEventListener(event: CallEvents.PlaybackFinished, handler: CallEvents.PlaybackFinished.Handler): void;

        addEventListener(event: CallEvents.PlaybackReady, handler: CallEvents.PlaybackReady.Handler): void;

        addEventListener(event: CallEvents.RecordError, handler: CallEvents.RecordError.Handler): void;

        addEventListener(event: CallEvents.RecordStarted, handler: CallEvents.RecordStarted.Handler): void;

        addEventListener(event: CallEvents.RecordStopped, handler: CallEvents.RecordStopped.Handler): void;

        addEventListener(event: CallEvents.ReInviteAccepted, handler: CallEvents.ReInviteAccepted.Handler): void;

        addEventListener(event: CallEvents.ReInviteReceived, handler: CallEvents.ReInviteReceived.Handler): void;

        addEventListener(event: CallEvents.ReInviteRejected, handler: CallEvents.ReInviteRejected.Handler): void;

        addEventListener(event: CallEvents.Ringing, handler: CallEvents.Ringing.Callback): void;

        addEventListener(event: CallEvents.Statistics, handler: CallEvents.Statistics.Handler): void;

        addEventListener(event: CallEvents.ToneDetected, handler: CallEvents.ToneDetected.Handler): void;

        addEventListener(event: CallEvents.ToneReceived, handler: CallEvents.ToneReceived.Handler): void;

        addEventListener(event: CallEvents.TransferComplete, handler: CallEvents.TransferComplete.Handler): void;

        addEventListener(event: CallEvents.VideoTrackCreated, handler: CallEvents.VideoTrackCreated.Handler): void;

        addEventListener(event: CallEvents.VoicemailToneDetected, handler: CallEvents.VoicemailToneDetected.Handler): void;

        addEventListener(event: CallEvents.VoicemailToneNotDetected, handler: CallEvents.VoicemailToneNotDetected.Handler): void;

        /**
         * Add handler for specific event generated by call in specific
         * application state. Use only functions as handlers; anything
         * except a function leads to the error and scenario termination
         * when a handler will be called.
         *
         * @param event One of the CallEvents (e.g. {@link CallEvents.Connected}).
         * @param handler Handler function. A single parameter is passed - object with event information.
         */
        addEventListener<E>(event: any, handler: EventHandler<E>): void;

        /**
         * Answer incoming call. Use it only for connecting non-P2P legs.
         * Remember that you can use the {@link Call.startEarlyMedia}
         * method before answering a call.
         *
         * @param extraHeaders Optional custom parameters (SIP headers) that
         * should be passed with answer message. Custom header names have to
         * begin with the 'X-' prefix. The "X-" headers could be handled by
         * a SIP phone or WEB SDK (e.g. see the
         * {@link https://voximplant.com/docs/references/websdk/enums/callevents.html#connected|Connected event}).
         * Example: `{'X-header':'value'}`.
         * @param parameters Custom parameters for answering calls.
         */
        answer(extraHeaders?: { [index: string]: string }, parameters?: VoxEngine.AnswerParameters): void;

        /**
         * Answer incoming call in peer-to-peer mode. Use it only for connecting P2P legs.
         *
         * @param extraHeaders Optional custom parameters (SIP headers) that
         * should be passed with answer message. Custom header names have to
         * begin with the 'X-' prefix. The "X-" headers could be handled by
         * a SIP phone or WEB SDK (e.g. see the
         * {@link https://voximplant.com/docs/references/websdk/enums/callevents.html#connected|Connected event}).
         * Example: `{'X-header':'value'}`.
         * @param parameters Custom parameters for answering calls.
         */
        answerDirect(extraHeaders?: { [index: string]: string }, parameters?: VoxEngine.AnswerParameters): void;

        /**
         * Returns Caller ID of the calling user, that is displayed to the
         * called user. Normally it's some phone number that can be used for
         * callback. IMPORTANT: virtual numbers rented from Voximplant can't
         * be used as CallerID, the values can be only real numbers.
         */
        callerid(): string;

        /**
         * Set or get custom string associated with the particular call
         * (e.g. Call object). Additionally, the customData value could be
         * sent from WEB/iOS/Android SDKs and then it became the customData
         * value in the Call object. Note that if you received some value
         * from SDK, you could always replace it manually. SDKs can pass
         * customData in two ways: 1) when SDK calls to the Voximplant cloud
         * 2) when SDK answers to the call from the Voximplant cloud. See
         * the syntax and details in the appropriate references:
         * - {@link https://voximplant.com/docs/references/websdk/classes/client.html#call|WEB SDK call()}
         * - {@link https://voximplant.com/docs/references/websdk/classes/call.html#answer|WEB SDK answer()}
         * - {@link https://voximplant.com/docs/references/mobilesdk/ios/Classes/VIClient/index.html#//api/name/callToUser:withSendVideo:receiveVideo:customData:|iOS callToUser()}
         * - {@link https://voximplant.com/docs/references/mobilesdk/ios/Classes/VICall/index.html#//api/name/answerWithSendVideo:receiveVideo:customData:headers:|iOS answerWithSendVideo()}
         * - {@link https://voximplant.com/docs/references/mobilesdk/android/com/voximplant/sdk/client/IClient.html#callTo-java.lang.String-com.voximplant.sdk.call.VideoFlags-java.lang.String-|Android callTo()}
         * - {@link https://voximplant.com/docs/references/mobilesdk/android/com/voximplant/sdk/call/ICall.html#answer-java.lang.String-com.voximplant.sdk.call.VideoFlags-java.util.Map-|Android answer()}
         *
         * @param data Custom call data to set. Maximum size is 200 bytes.
         */
        customData(data?: string): string;

        /**
         * @deprecated use {@link #reject}
         *
         * @param code SIP status code.
         * @param extraHeaders Optional custom parameters (SIP headers) that
         * should be passed with answer message. Custom header names have to
         * begin with the 'X-' prefix. The "X-" headers could be handled by
         * a SIP phone or WEB SDK (e.g. see the
         * {@link http://voximplant.com/docs/references/websdk/enums/events.html#incomingcall|incomingCall event}).
         * Example: `{'X-header':'value'}`
         */
        decline(code?: number, extraHeaders?: { [index: string]: string }): void;

        /**
         * Enables or disables progress tone detection. Calling this method
         * without an argument is equal to the call with true. Can be used
         * only for outgoing calls. If progress tone is detected, the
         * {@link CallEvents.ToneDetected} event will be triggered for the
         * call object. Note that event is triggered only if the
         * {@link CallEvents.Connected} event was triggered before.
         *
         * @param detect true/false enable/disable progress tone. It's false
         * by default.
         */
        detectProgressTone(detect?: boolean): boolean;

        /**
         * Enables or disables Voicemail tone detection. Can be used only
         * for outgoing calls. Tone signal is in the range 500 - 2000 Hz on
         * the call. Right after the methodâ€™s call VoxEngine will start to
         * scan a media stream. The scanning will stop after the timeout. If
         * Voicemail tone is detected (or is not detected for some time),
         * the {@link CallEvents.VoicemailToneDetected} or
         * {@link CallEvents.VoicemailToneNotDetected} event will be
         * triggered for the call object.
         *
         * @param timeout Optional timeout in sec. 20 sec by default.
         * @param threshold Minimal detected tone duration. 100 ms by
         * default.
         */
        detectVoicemailTone(timeout?: number, threshold?: number): void;

        /**
         * Returns a name of the calling user, that is displayed to the called user.
         * Normally it's a human-readable version of {@link Call#callerid}, e.g. a
         * person's name.
         */
        displayName(): string;

        /**
         * Enables or disables detection of microphone status in the call.
         * If detection is enabled, the {@link CallEvents.MicStatusChange}
         * event will be triggered at each status change.
         *
         * @param handle Enable/disable microphone status analysis. It's
         * false by default.
         */
        handleMicStatus(handle: boolean): void;

        /**
         * Change DTMF processing mode. If it's true, each received signal
         * triggers the {@link CallEvents.ToneReceived}.
         *
         * @param handle Enable/disable DTMF analysis. It's false by
         * default.
         */
        handleTones(handle: boolean): void;

        /**
         * Start finishing a call. Firstly it triggers the
         * {@link CallEvents.Disconnected} event immediately. If there are
         * no other active calls and/or ACD requests in a call session the
         * {@link AppEvents.Terminating} and {@link AppEvents.Terminated}
         * events will be triggered in 60 seconds (see the details in
         * {@link https://voximplant.com/docs/references/voxengine/|VoxEngine session limits}).
         *
         * @param extraHeaders Optional custom parameters (SIP headers) that
         * should be passed with answer message. Custom header names have to
         * begin with the 'X-' prefix. The "X-" headers could be handled by
         * a SIP phone or WEB SDK (e.g. see the
         * {@link http://voximplant.com/docs/references/websdk/enums/events.html#incomingcall|incomingCall event}).
         * Example: `{'X-header':'value'}`
         */
        hangup(extraHeaders?: { [index: string]: string }): void;

        /**
         * Returns call id. Each call in JavaScript session has its own
         * unique id which is used to describe every action in the call
         * logs.
         */
        id(): string;

        /**
         * Returns true if the call is incoming, false if it was originated
         * from script.
         */
        incoming(): boolean;

        /**
         * Returns a dialed number of inbound or outbound call.
         */
        number(): string;

        /**
         * Provides country-specific progress tones. The method sends a
         * command to the Voximplant cloud to start playing progress tones
         * in the call. So the progress tones totally depend on the
         * Voximplant cloud. Note that in order to work properly in a call
         * that is not connected yet, you need to call the
         * {@link Call#startEarlyMedia} method before using this function.
         * IMPORTANT: each call object can send media to any number of other
         * calls (media units), but can receive only one audio stream. A new
         * incoming stream always replaces the previous one.
         *
         * @param country 2-digit country code. Currently supported values
         * are US, RU.
         */
        playProgressTone(country?: 'US' | 'RU' | string): void;

        /**
         * Start recording incoming and outgoing audio for this call. This
         * method triggers the {@link CallEvents.RecordStarted} event. The
         * default quality is 8kHz / 32kbps; the format is mp3. See
         * {@link https://voximplant.com/blog/audio-recording|this article}
         * for details.
         *
         * @param params Recorder parameters
         */
        record(params?: VoxEngine.RecorderParameters): void;

        /**
         * Reject an incoming call. Firstly it triggers the
         * {@link CallEvents.Disconnected} event immediately. The
         * {@link AppEvents.Terminating} and {@link AppEvents.Terminated}
         * events will be triggered in 60 seconds.
         *
         * @param code SIP status code.
         * @param extraHeaders Optional custom parameters (SIP headers) that
         * should be passed with answer message. Custom header names have to
         * begin with the 'X-' prefix. The "X-" headers could be handled by
         * a SIP phone or WEB SDK (e.g. see the
         * {@link http://voximplant.com/docs/references/websdk/enums/events.html#incomingcall|incomingCall event}).
         * Example: `{'X-header':'value'}`
         */
        reject(code?: number, extraHeaders?: { [index: string]: string }): void;

        /**
         * Remove event handler for specific event generated by call in
         * specific application state
         *
         * @param event One of the {@link CallEvents} (e.g.
         * {@link CallEvents.Connected}).
         * @param handler Handler function. If not specified, all event
         * listeners are removed.
         */
        removeEventListener(event: CallEvents | any, handler?: Function): void;

        /**
         * Provides progress tones for the incoming call. The method sends a
         * low-level command to the endpoint device to start playing
         * progress tones in the call. So the progress tones depend on
         * endpoint device's behavior rather than the Voximplant cloud.
         * IMPORTANT: each call object can send media to any number of other
         * calls (media units), but can receive only one audio stream. A new
         * incoming stream always replaces the previous one.
         *
         * @param extraHeaders Optional custom parameters (SIP headers) that
         * should be passed with answer message. Custom header names have to
         * begin with the 'X-' prefix. The "X-" headers could be handled by
         * a SIP phone or WEB SDK (e.g. see the
         * {@link http://voximplant.com/docs/references/websdk/enums/events.html#incomingcall|incomingCall event}).
         * Example: `{'X-header':'value'}`
         */
        ring(extraHeaders?: { [index: string]: string }): void;

        /**
         * Say some text to the {@link CallEvents.Connected} call. If text
         * length exceeds 1500 characters the
         * {@link PlayerEvents.PlaybackFinished} event will be triggered
         * with error description. IMPORTANT: each call object can send
         * media to any number of other calls (media units), but can receive
         * only one audio stream. A new incoming stream always replaces the
         * previous one.
         *
         * @param text Message that will be played to the call. To put an
         * accent in specified syllabus, use tag
         * `<say-as stress='1'> </say-as>`. Example with accent on first
         * syllabus:
         * ```
         * call.say("<say-as stress='1'>something</say-as>", Language.UK_ENGLISH_FEMALE)
         * ```
         * @param language Language and voice to be used. List of all
         * supported languages: {@link Language}. The default value is
         * {@link Language.UK_ENGLISH_FEMALE}.
         * @param ttsoptions Optional parameters for TTS. SSML markup can be
         * used to control aspects of speech such as pronunciation, volume,
         * pitch, rate, etc.
         */
        say(text: string, language?: Language, ttsoptions?: VoxEngine.TTSOptions): void;

        /**
         * Send DTMF digits to the remote peer.
         *
         * @param digits Any combination of 0-9, *, #, p (pause) symbols.
         */
        sendDigits(digits: string): void;

        /**
         * Send Info (SIP INFO) message inside the call.
         *
         * @param mimeType MIME type of the message.
         * @param body Message content. Maximum size is 8192 bytes according
         * to the {@link https://voximplant.com/docs/references/voxengine/|limits}.
         * @param extraHeaders Optional custom parameters (SIP headers) that
         * should be passed with answer message. Custom header names have to
         * begin with the 'X-' prefix. The "X-" headers could be handled by
         * a SIP phone or WEB SDK (e.g. see the
         * {@link http://voximplant.com/docs/references/websdk/enums/events.html#incomingcall|incomingCall event}).
         * Example: `{'X-header':'value'}`
         */
        sendInfo(mimeType: string, body: string, extraHeaders?: { [index: string]: string }): void;

        /**
         * Send text message during the call. See the similar methods in
         * following SDKs:
         *
         * - {@link https://voximplant.com/docs/references/websdk/classes/call.html#sendmessage|WEB}
         * - {@link https://voximplant.com/docs/references/mobilesdk/ios/Classes/VICall/index.html#//api/name/sendMessage:headers:|iOS}
         * - {@link https://voximplant.com/docs/references/mobilesdk/android/com/voximplant/sdk/call/ICall.html#sendMessage-java.lang.String-|Android}
         *
         * @param text Message text. Maximum size is 8192 bytes according to
         * the {@link https://voximplant.com/docs/references/voxengine/|limits}.
         */
        sendMessage(text: string): void;

        /**
         * Informs call endpoint that early media will be sent before
         * accepting the call. It allows playing voicemail prompt or music
         * during establishing the connection. It doesn't allow to listen to
         * call endpoint. Note that unanswered call can be in "early media"
         * state only for 60 seconds, see the
         * {@link https://voximplant.com/docs/references/voxengine/|VoxEngine session limits}
         * for details.
         *
         * @param extraHeaders Optional custom parameters (SIP headers) that
         * should be passed with answer message. Custom header names have to
         * begin with the 'X-' prefix. The "X-" headers could be handled by
         * a SIP phone or WEB SDK (e.g. see the
         * {@link http://voximplant.com/docs/references/websdk/enums/events.html#incomingcall|incomingCall event}).
         * Example: `{'X-header':'value'}`
         */
        startEarlyMedia(extraHeaders?: {[index: string]: string}): void;

        /**
         * Starts to play audio file to the Call.answered call. You can stop
         * playing manually by using the {@link stopPlayback} method.
         * IMPORTANT: each call object can send media to any number of other
         * calls (media units), but can receive only one audio stream. A new
         * incoming stream always replaces the previous one.
         *
         * @param url HTTP/HTTPS url of audio file. The file is cached after
         * the first playing. Supported formats are: mp3, ogg & flac (mp3,
         * speex, vorbis and flac codecs respectively). Maximum file size is
         * 2 MBytes.
         * @param loop If it's true, playback will be looped.
         */
        startPlayback(url: string, loop: boolean): void;

        /**
         * Returns current state of the call. Possible values are:
         * TERMINATED | CONNECTED | PROGRESSING | ALERTING.
         */
        state(): 'ALERTING' | 'CONNECTED' | 'PROGRESSING' | 'TERMINATED';

        /**
         * Stop audio playback that was started before by calling the
         * {@link #startPlayback} method.
         */
        stopPlayback(): void;

        /**
         * Returns human-readable description of the call.
         */
        toString(): string;

        /**
         * Returns VAD (Voice Activity Detection) status. The including of
         * the ASR also activates VAD so in that case vad() returns true.
         */
        vad(): boolean;
    }
}
